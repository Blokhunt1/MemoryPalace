@page "/palace/{PalaceId:int}/edit"
@attribute [Authorize]
@using MemoryPalaceApp.Models
@using MemoryPalaceApp.Services
@inject MemoryPalaceService MemoryPalaceService

<PageTitle>Edit Palace - @(memoryPalace?.Name ?? "Loading...")</PageTitle>

@if (memoryPalace == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h3>Edit: @memoryPalace.Name</h3>
            <p class="text-muted">@memoryPalace.Subject</p>
        </div>
        <div>
            <a href="/palaces" class="btn btn-secondary">‚Üê Back to Palaces</a>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(saveMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @saveMessage
            <button type="button" class="btn-close" aria-label="Close" @onclick="() => saveMessage = string.Empty"></button>
        </div>
    }

    <div class="card">
        <div class="card-header">
            <h5>All Loci (@memoryPalace.PointsOfLoci.Count total)</h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th style="width: 50px;">#</th>
                            <th style="width: 100px;">Image</th>
                            <th>Location</th>
                            <th>Category</th>
                            <th>Written Key</th>
                            <th>Written Value</th>
                            <th>Image Key</th>
                            <th>Image Value</th>
                            <th style="width: 100px;">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var loci in memoryPalace.PointsOfLoci.OrderBy(l => l.Order))
                        {
                            <tr>
                                <td>@loci.Order</td>
                                <td>
                                    @if (!string.IsNullOrEmpty(loci.ImagePath))
                                    {
                                        <img src="@loci.ImagePath" class="img-thumbnail" style="max-width: 80px; max-height: 60px;" alt="Loci @loci.Order" />
                                    }
                                    else
                                    {
                                        <span class="text-muted">No image</span>
                                    }
                                </td>
                                <td>
                                    @if (editingLoci == loci.Id)
                                    {
                                        <input type="text" class="form-control form-control-sm" @bind="loci.Location" @onkeypress="@(async (e) => await HandleKeyPress(e, loci))" />
                                    }
                                    else
                                    {
                                        <span @onclick="() => StartEdit(loci.Id)" style="cursor: pointer;">@loci.Location</span>
                                    }
                                </td>
                                <td>
                                    @if (editingLoci == loci.Id)
                                    {
                                        <input type="text" class="form-control form-control-sm" @bind="loci.Category" @onkeypress="@(async (e) => await HandleKeyPress(e, loci))" />
                                    }
                                    else
                                    {
                                        <span @onclick="() => StartEdit(loci.Id)" style="cursor: pointer;">@loci.Category</span>
                                    }
                                </td>
                                <td>
                                    @if (editingLoci == loci.Id)
                                    {
                                        <input type="text" class="form-control form-control-sm" @bind="loci.WrittenKey" @onkeypress="@(async (e) => await HandleKeyPress(e, loci))" />
                                    }
                                    else
                                    {
                                        <span @onclick="() => StartEdit(loci.Id)" style="cursor: pointer;">@loci.WrittenKey</span>
                                    }
                                </td>
                                <td>
                                    @if (editingLoci == loci.Id)
                                    {
                                        <textarea class="form-control form-control-sm" rows="2" @bind="loci.WrittenValue" @onkeypress="@(async (e) => await HandleKeyPress(e, loci))"></textarea>
                                    }
                                    else
                                    {
                                        <span @onclick="() => StartEdit(loci.Id)" style="cursor: pointer;">@(TruncateText(loci.WrittenValue, 50))</span>
                                    }
                                </td>
                                <td>
                                    @if (editingLoci == loci.Id)
                                    {
                                        <input type="text" class="form-control form-control-sm" @bind="loci.ImageKey" @onkeypress="@(async (e) => await HandleKeyPress(e, loci))" />
                                    }
                                    else
                                    {
                                        <span @onclick="() => StartEdit(loci.Id)" style="cursor: pointer;">@loci.ImageKey</span>
                                    }
                                </td>
                                <td>
                                    @if (editingLoci == loci.Id)
                                    {
                                        <input type="text" class="form-control form-control-sm" @bind="loci.ImageValue" @onkeypress="@(async (e) => await HandleKeyPress(e, loci))" />
                                    }
                                    else
                                    {
                                        <span @onclick="() => StartEdit(loci.Id)" style="cursor: pointer;">@loci.ImageValue</span>
                                    }
                                </td>
                                <td>
                                    @if (editingLoci == loci.Id)
                                    {
                                        <div class="btn-group-vertical btn-group-sm">
                                            <button class="btn btn-success btn-sm" @onclick="() => SaveLoci(loci)">Save</button>
                                            <button class="btn btn-secondary btn-sm" @onclick="() => CancelEdit()">Cancel</button>
                                        </div>
                                    }
                                    else
                                    {
                                        <button class="btn btn-outline-primary btn-sm" @onclick="() => StartEdit(loci.Id)">Edit</button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="mt-3">
        <p class="text-muted">
            <small>Click on any cell to edit it. Press Enter to save, or use the Save button.</small>
        </p>
    </div>
}

@code {
    [Parameter] public int PalaceId { get; set; }
    
    private MemoryPalace? memoryPalace;
    private int editingLoci = -1;
    private string saveMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        memoryPalace = await MemoryPalaceService.GetMemoryPalaceAsync(PalaceId);
    }

    private void StartEdit(int lociId)
    {
        editingLoci = lociId;
        saveMessage = string.Empty;
    }

    private void CancelEdit()
    {
        editingLoci = -1;
    }

    private async Task SaveLoci(Loci loci)
    {
        await MemoryPalaceService.UpdateLociAsync(loci);
        editingLoci = -1;
        saveMessage = $"Saved changes for Loci {loci.Order}";
        
        // Clear message after 3 seconds
        _ = Task.Delay(3000).ContinueWith(_ => 
        {
            saveMessage = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }

    private async Task HandleKeyPress(KeyboardEventArgs e, Loci loci)
    {
        if (e.Key == "Enter" && e.ShiftKey == false)
        {
            await SaveLoci(loci);
        }
        else if (e.Key == "Escape")
        {
            CancelEdit();
        }
    }

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
            return text;
        
        return text.Substring(0, maxLength) + "...";
    }
}