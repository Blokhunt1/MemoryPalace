@page "/upload"
@using MemoryPalaceApp.Services
@using System.ComponentModel.DataAnnotations
@inject ImageService ImageService
@inject MemoryPalaceService MemoryPalaceService
@inject NavigationManager Navigation

<PageTitle>Upload Images</PageTitle>

<div class="container-fluid mt-4">
    <h3 class="text-warning mb-4">üèóÔ∏è Forge New Memory Palace</h3>

    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">Palace Creation</h5>
        </div>
        <div class="card-body">
        <EditForm Model="@uploadModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="name" class="form-label">Memory Palace Name</label>
                <InputText id="name" class="form-control" @bind-Value="uploadModel.Name" />
            </div>

            <div class="mb-3">
                <label for="subject" class="form-label">Subject</label>
                <InputText id="subject" class="form-control" @bind-Value="uploadModel.Subject" />
            </div>

            <div class="mb-3">
                <label for="zipFile" class="form-label">Upload Zip File with Images</label>
                <InputFile id="zipFile" class="form-control" OnChange="@OnFileSelected" accept=".zip" />
            </div>

            @if (isUploading)
            {
                <div class="alert alert-info">
                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                    Processing images...
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            <button type="submit" class="btn btn-warning" disabled="@(selectedFile == null || isUploading)">
                üè∞ Create Memory Palace
            </button>
        </EditForm>
        </div>
    </div>
</div>

@code {
    private UploadModel uploadModel = new();
    private IBrowserFile? selectedFile;
    private bool isUploading = false;
    private string errorMessage = string.Empty;

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        errorMessage = string.Empty;
    }

    private async Task HandleValidSubmit()
    {
        if (selectedFile == null) return;

        isUploading = true;
        errorMessage = string.Empty;

        try
        {
            // Create a memory stream to avoid synchronous read issues
            using var fileStream = selectedFile.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await fileStream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;
            
            var imagePaths = await ImageService.ProcessZipFileAsync(memoryStream, uploadModel.Name);

            if (imagePaths.Count == 0)
            {
                errorMessage = "No valid images found in the zip file.";
                return;
            }

            var memoryPalace = await MemoryPalaceService.CreateMemoryPalaceAsync(
                uploadModel.Name, 
                uploadModel.Subject, 
                imagePaths);

            Navigation.NavigateTo($"/walkthrough/{memoryPalace.Id}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error processing file: {ex.Message}";
        }
        finally
        {
            isUploading = false;
        }
    }

    public class UploadModel
    {
        [Required]
        public string Name { get; set; } = string.Empty;
        
        public string Subject { get; set; } = string.Empty;
    }
}